{"version":3,"file":"golden-layout.interfaces.js","sourceRoot":"","sources":["../../src/lib/golden-layout.interfaces.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAG/C,MAAM,CAAC,IAAM,oBAAoB,GAAG,IAAI,cAAc,CAAC,sBAAsB,CAAC,CAAC;AAE/E,MAAM,CAAC,IAAM,kBAAkB,GAAG;IAChC,aAAa;IACb,cAAc;IACd,cAAc;IACd,cAAc;IACd,kBAAkB;IAClB,eAAe;IACf,aAAa;IACb,kBAAkB;IAClB,YAAY;IACZ,eAAe;IACf,cAAc;IACd,YAAY;CACb,CAAC;AAQF,IAAA;IAME,4BAAY,MAAgC;QAAhC,uBAAA,EAAA,WAAgC;QAC1C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KACrB;IAED,mCAAM,GAAN,UAAO,MAAsC,EAAE,MAAY;QAApD,uBAAA,EAAA,WAAsC;QAC3C,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC;QAExB,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;gBACtD,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,WAAW,CAAC,CAAC,CAC3E,CAAC;gBACC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBAEjB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;aACvC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;aAC3B;SACF;KACF;6BAlDH;IAmDC,CAAA;AAzBD,8BAyBC","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport * as GoldenLayout from 'golden-layout';\n\nexport const GOLDEN_LAYOUT_CONFIG = new InjectionToken('GOLDEN_LAYOUT_CONFIG');\n\nexport const GoldenLayoutEvents = [\n  'initialised',\n  'stateChanged',\n  'windowOpened',\n  'windowClosed',\n  'selectionChanged',\n  'itemDestroyed',\n  'itemCreated',\n  'componentCreated',\n  'rowCreated',\n  'columnCreated',\n  'stackCreated',\n  'tabCreated'\n];\n\n\nexport interface GoldenLayoutComponentDefinition {\n  componentName: string;\n  componentType: any;\n}\n\nexport class GoldenLayoutConfig implements GoldenLayout.Config {\n  settings?: GoldenLayout.Settings;\n  dimensions?: GoldenLayout.Dimensions;\n  labels?: GoldenLayout.Labels;\n  content?: GoldenLayout.ItemConfigType[];\n\n  constructor(config: GoldenLayout.Config = {}) {\n    this.assign(config);\n  }\n\n  assign(config: GoldenLayout.Config | any = {}, target?: any) {\n    target = target || this;\n\n    for (const key in config) {\n      if (config[key] != null && !(Array.isArray(config[key])) &&\n        typeof config[key] === 'object' && !(config[key] instanceof HTMLElement))\n      {\n        target[key] = {};\n\n        this.assign(config[key], target[key]);\n      } else {\n        target[key] = config[key];\n      }\n    }\n  }\n}\nexport interface GoldenLayoutContentComponentInterface {\n  state: any;\n}\n\n// export type DropzoneUrlFunction = (files: any) => string;\n// export type DropzoneMethodFunction = (files: any) => string;\n\n// export type DropzoneParamsFunction = (files: any, xhr: any, chunk?: any) => any;\n// export type DropzoneHeadersFunction = () => any;\n\n// export type DropzoneInitFunction = () => any;\n// export type DropzoneFallbackFunction = () => HTMLElement;\n\n// export type DropzoneAcceptFunction = (file: File, done: Function) => any;\n// export type DropzoneResizeFunction = (file: File, width: number, height: number, resizeMethod: string) => any;\n\n// export type DropzoneRenameFileFunction = (file: File) => string;\n// export type DropzoneTransformFileFunction = (file: File, done: Function) => any;\n// export type DropzoneChunksUploadedFunction = (file: File, done: Function) => any;"]}