import * as GoldenLayout from 'golden-layout';
import { InjectionToken, Renderer2, KeyValueDiffers, ElementRef, ViewContainerRef, Injector, SimpleChanges, OnInit, DoCheck, OnChanges, OnDestroy, NgZone, ComponentFactoryResolver, EventEmitter } from '@angular/core';
import { GoldenLayoutConfig, GoldenLayoutComponentDefinition } from './golden-layout.interfaces';
export declare const GoldenLayoutContainer: InjectionToken<{}>;
export declare const GoldenLayoutComponentState: InjectionToken<{}>;
export declare class GoldenLayoutDirective implements OnInit, DoCheck, OnChanges, OnDestroy {
    private resolver;
    private zone;
    private renderer;
    private elementRef;
    private differs;
    private viewContainer;
    private readonly injector;
    private defaults;
    private instance;
    private configDiff;
    private el;
    disabled: boolean;
    config: GoldenLayout.Config;
    private _content;
    contentChange: EventEmitter<{}>;
    componentDefinitions: GoldenLayoutComponentDefinition[];
    GL_INITIALISED: EventEmitter<any>;
    GL_STATECHANGED: EventEmitter<any>;
    GL_WINDOWOPENED: EventEmitter<any>;
    GL_WINDOWCLOSED: EventEmitter<any>;
    GL_SELECTIONCHANGED: EventEmitter<any>;
    GL_ITEMDESTROYED: EventEmitter<any>;
    GL_ITEMCREATED: EventEmitter<any>;
    GL_COMPONENTCREATED: EventEmitter<any>;
    GL_ROWCREATED: EventEmitter<any>;
    GL_COLUMNCREATED: EventEmitter<any>;
    GL_STACKCREATED: EventEmitter<any>;
    GL_TABCREATED: EventEmitter<any>;
    constructor(resolver: ComponentFactoryResolver, zone: NgZone, renderer: Renderer2, elementRef: ElementRef, differs: KeyValueDiffers, viewContainer: ViewContainerRef, injector: Injector, defaults: GoldenLayoutConfig);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    init(): void;
    content: GoldenLayout.ItemConfigType;
    onResize(event: any): void;
    registerComponent(goldenLayoutComponentDefinitions: GoldenLayoutComponentDefinition): void;
    private _createComponentInjector(container, componentState);
    ngDoCheck(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    goldenLayout(): any;
}
