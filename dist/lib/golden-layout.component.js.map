{"version":3,"file":"golden-layout.component.js","sourceRoot":"","sources":["../../src/lib/golden-layout.component.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,SAAS,EACd,KAAK,EAAU,SAAS,EAAgB,sBAAsB;AAElE,OAAO,EAAE,qBAAqB,EAAE,kCAAkC;AAClE,OAAO,EAAE,kBAAkB,EAAE,mCAAmC;AAQ9D,MAAM;IAwCJ;wBAvC6B,KAAK;oCAIO,IAAI;KAmC7B;;;YA9CjB,SAAS,SAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,QAAQ,EAAE,qBAAqB;gBAC/B,QAAQ,EAAE,aAAa;aAExB;;;;;yBAEE,KAAK;uBAEL,KAAK;qCAEL,KAAK;6BAEL,SAAS,SAAC,qBAAqB","sourcesContent":["import { Component, ViewEncapsulation,\n    Input, Output, ViewChild, EventEmitter } from '@angular/core';\n  \nimport { GoldenLayoutDirective } from './golden-layout.directive';\nimport { GoldenLayoutConfig } from './golden-layout.interfaces';\n  \n  @Component({\n    selector: 'golden-layout',\n    exportAs: 'angularGoldenLayout',\n    template: '<div></div>',\n    // styleUrls: [ './lib/golden-layout.component.css' ],\n  })\n  export class GoldenLayoutComponent {\n    @Input() disabled: boolean = false;\n  \n    @Input() config: GoldenLayoutConfig;\n  \n    @Input() useGoldenLayoutClass: boolean = true;\n  \n    @ViewChild(GoldenLayoutDirective) directiveRef: GoldenLayoutDirective;\n  \n    // @Output('error'                 ) DZ_ERROR                    = new EventEmitter<any>();\n    // @Output('success'               ) DZ_SUCCESS                  = new EventEmitter<any>();\n    // @Output('sending'               ) DZ_SENDING                  = new EventEmitter<any>();\n    // @Output('canceled'              ) DZ_CANCELED                 = new EventEmitter<any>();\n    // @Output('complete'              ) DZ_COMPLETE                 = new EventEmitter<any>();\n    // @Output('processing'            ) DZ_PROCESSING               = new EventEmitter<any>();\n  \n    // @Output('drop'                  ) DZ_DROP                     = new EventEmitter<any>();\n    // @Output('dragStart'             ) DZ_DRAGSTART                = new EventEmitter<any>();\n    // @Output('dragEnd'               ) DZ_DRAGEND                  = new EventEmitter<any>();\n    // @Output('dragEnter'             ) DZ_DRAGENTER                = new EventEmitter<any>();\n    // @Output('dragOver'              ) DZ_DRAGOVER                 = new EventEmitter<any>();\n    // @Output('dragLeave'             ) DZ_DRAGLEAVE                = new EventEmitter<any>();\n  \n    // @Output('thumbnail'             ) DZ_THUMBNAIL                = new EventEmitter<any>();\n    // @Output('addedFile'             ) DZ_ADDEDFILE                = new EventEmitter<any>();\n    // @Output('removedFile'           ) DZ_REMOVEDFILE              = new EventEmitter<any>();\n    // @Output('uploadProgress'        ) DZ_UPLOADPROGRESS           = new EventEmitter<any>();\n    // @Output('maxFilesReached'       ) DZ_MAXFILESREACHED          = new EventEmitter<any>();\n    // @Output('maxFilesExceeded'      ) DZ_MAXFILESEXCEEDED         = new EventEmitter<any>();\n  \n    // @Output('successMultiple'       ) DZ_SUCCESSMULTIPLE          = new EventEmitter<any>();\n    // @Output('sendingMultiple'       ) DZ_SENDINGMULTIPLE          = new EventEmitter<any>();\n    // @Output('canceledMultiple'      ) DZ_CANCELEDMULTIPLE         = new EventEmitter<any>();\n    // @Output('completeMultiple'      ) DZ_COMPLETEMULTIPLE         = new EventEmitter<any>();\n    // @Output('processingMultiple'    ) DZ_PROCESSINGMULTIPLE       = new EventEmitter<any>();\n  \n    // @Output('reset'                 ) DZ_RESET                    = new EventEmitter<any>();\n    // @Output('queueComplete'         ) DZ_QUEUECOMPLETE            = new EventEmitter<any>();\n    // @Output('totalUploadProgress'   ) DZ_TOTALUPLOADPROGRESS      = new EventEmitter<any>();\n  \n    constructor() {}\n  }"]}