{"version":3,"file":"angular-golden-layout.umd.js","sources":["../src/lib/golden-layout.interfaces.ts","../src/lib/golden-layout.directive.ts","../src/lib/golden-layout.component.ts","../src/lib/golden-layout.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport * as GoldenLayout from 'golden-layout';\n\nexport const GOLDEN_LAYOUT_CONFIG = new InjectionToken('GOLDEN_LAYOUT_CONFIG');\n\nexport const GoldenLayoutEvents = [\n  'initialised',\n  'stateChanged',\n  'windowOpened',\n  'windowClosed',\n  'selectionChanged',\n  'itemDestroyed',\n  'itemCreated',\n  'componentCreated',\n  'rowCreated',\n  'columnCreated',\n  'stackCreated',\n  'tabCreated'\n];\n\n\nexport interface GoldenLayoutComponentDefinition {\n  componentName: string;\n  componentType: any;\n}\n\nexport class GoldenLayoutConfig implements GoldenLayout.Config {\n  settings: GoldenLayout.Settings;\n  dimensions: GoldenLayout.Dimensions;\n  labels: GoldenLayout.Labels;\n  content: GoldenLayout.ItemConfigType[];\n\n  constructor(config: GoldenLayout.Config = {}) {\n    this.assign(config);\n  }\n\n  assign(config: GoldenLayout.Config | any = {}, target?: any) {\n    target = target || this;\n\n    for (const key in config) {\n      if (config[key] != null && !(Array.isArray(config[key])) &&\n        typeof config[key] === 'object' && !(config[key] instanceof HTMLElement))\n      {\n        target[key] = {};\n\n        this.assign(config[key], target[key]);\n      } else {\n        target[key] = config[key];\n      }\n    }\n  }\n}\nexport interface GoldenLayoutContentComponentInterface {\n  state: any;\n}\n\n// export type DropzoneUrlFunction = (files: any) => string;\n// export type DropzoneMethodFunction = (files: any) => string;\n\n// export type DropzoneParamsFunction = (files: any, xhr: any, chunk?: any) => any;\n// export type DropzoneHeadersFunction = () => any;\n\n// export type DropzoneInitFunction = () => any;\n// export type DropzoneFallbackFunction = () => HTMLElement;\n\n// export type DropzoneAcceptFunction = (file: File, done: Function) => any;\n// export type DropzoneResizeFunction = (file: File, width: number, height: number, resizeMethod: string) => any;\n\n// export type DropzoneRenameFileFunction = (file: File) => string;\n// export type DropzoneTransformFileFunction = (file: File, done: Function) => any;\n// export type DropzoneChunksUploadedFunction = (file: File, done: Function) => any;","import * as GoldenLayout from 'golden-layout';\nimport { InjectionToken, HostListener, Directive, KeyValueDiffer, Input, Renderer2, KeyValueDiffers, ElementRef, ViewContainerRef, Injector,\n Optional, ViewChild, Inject, SimpleChanges, OnInit, DoCheck, OnChanges, OnDestroy, NgZone, ReflectiveInjector, ComponentFactoryResolver, EventEmitter, Output } from '@angular/core';\n\nimport { GOLDEN_LAYOUT_CONFIG } from './golden-layout.interfaces';\n\nimport { GoldenLayoutEvents, GoldenLayoutConfig, GoldenLayoutComponentDefinition } from './golden-layout.interfaces';\n\nexport const GoldenLayoutContainer = new InjectionToken('GoldenLayoutContainer');\nexport const GoldenLayoutComponentState = new InjectionToken('GoldenLayoutComponentState');\nconst COMPONENT_REF_KEY = '$componentRef';\n\n@Directive({\n  selector: '[golden-layout]',\n  exportAs: 'angularGoldenLayout'\n})\nexport class GoldenLayoutDirective  implements OnInit, DoCheck, OnChanges, OnDestroy {\n  private instance: any;\n\n  private configDiff: KeyValueDiffer<string, any>;\n\n  @ViewChild('glroot') private el: ElementRef;\n  @Input() disabled: boolean = false;\n\n  @Input('golden-layout') config: GoldenLayout.Config;\n  private _content: GoldenLayout.ItemConfigType;\n  @Output() contentChange = new EventEmitter();\n  @Input() componentDefinitions: GoldenLayoutComponentDefinition[];\n\n  @Output('initialised'        ) GL_INITIALISED          = new EventEmitter<any>();\n  @Output('stateChanged'       ) GL_STATECHANGED         = new EventEmitter<any>();\n  @Output('windowOpened'       ) GL_WINDOWOPENED         = new EventEmitter<any>();\n  @Output('windowClosed'       ) GL_WINDOWCLOSED         = new EventEmitter<any>();\n  @Output('selectionChanged'   ) GL_SELECTIONCHANGED     = new EventEmitter<any>();\n  @Output('itemDestroyed'      ) GL_ITEMDESTROYED        = new EventEmitter<any>();\n  @Output('itemCreated'        ) GL_ITEMCREATED          = new EventEmitter<any>();\n  @Output('componentCreated'   ) GL_COMPONENTCREATED     = new EventEmitter<any>();\n  @Output('rowCreated'         ) GL_ROWCREATED           = new EventEmitter<any>();\n  @Output('columnCreated'      ) GL_COLUMNCREATED        = new EventEmitter<any>();\n  @Output('stackCreated'       ) GL_STACKCREATED         = new EventEmitter<any>();\n  @Output('tabCreated'         ) GL_TABCREATED           = new EventEmitter<any>();\n\n  constructor(\n    private resolver: ComponentFactoryResolver, \n    private zone: NgZone, \n    private renderer: Renderer2,\n    private elementRef: ElementRef, \n    private differs: KeyValueDiffers,\n    private viewContainer: ViewContainerRef,\n    private readonly injector: Injector,\n    @Optional() @Inject(GOLDEN_LAYOUT_CONFIG) private defaults: GoldenLayoutConfig)\n  {\n    const gl = GoldenLayout;\n  }\n\n  ngOnInit() {\n    const params = new GoldenLayoutConfig(this.defaults);\n\n    params.assign(this.config); \n    params.assign({content: this.content});\n\n    this.zone.runOutsideAngular(() => {\n      this.instance = new GoldenLayout(params, this.elementRef.nativeElement);\n      this.instance.on( 'stateChanged', () => {\n        this.content = this.instance.toConfig().content;\n      });\n\n      // this.instance.on('itemDestroyed', (item: any) => {\n      //   const container = item.container;\n      //   const component = container && container[COMPONENT_REF_KEY];\n      //   if (component) {\n      //     component.destroy();\n      //     (container as any)[COMPONENT_REF_KEY] = null;\n      //   }\n      // });\n      \n      // Add native Golden Layout event handling\n      GoldenLayoutEvents.forEach((eventName) => {\n        this.instance.on(eventName.toLowerCase(), (...args) => {\n          args = (args.length === 1) ? args[0] : args;\n  \n          if (this[`GL_${eventName.toUpperCase()}`]) {\n            this.zone.run(() => {\n              this[`GL_${eventName.toUpperCase()}`].emit(args);\n            });\n          }\n        });\n      });\n    });\n\n    if (!this.configDiff) {\n      this.configDiff = this.differs.find(this.config || {}).create();\n\n      this.configDiff.diff(this.config || {});\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.componentDefinitions.forEach(componentDefinition => {\n      this.registerComponent(componentDefinition);\n    });\n    this.init();\n  }\n\n  public init() {\n    //init golden layout\n    this.zone.runOutsideAngular(() => {\n      this.instance.init();\n    });\n  }\n\n  set content(val) {\n    this._content = val;\n    this.contentChange.emit(this._content);\n  }\n\n  @Input()\n  get content() {\n    return this._content;\n  }\n\n  public updateSize(width: number, height: number): void {\n    if (this.instance) {\n      this.instance.updateSize(width, height);\n    }\n  }\n\n  // public getComponent(name: string): void {\n  //   if (this.instance) {\n  //     this.instance.getComponent(name);\n  //   }\n  // }\n\n  public registerComponent(goldenLayoutComponentDefinitions: GoldenLayoutComponentDefinition) {\n\n    this.instance.registerComponent(goldenLayoutComponentDefinitions.componentName, (container: GoldenLayout.Container, componentState: any) => {\n       this.zone.run(() => {\n        // Inputs need to be in the following format to be resolved properly\n        // let inputProviders = Object.keys(componentState).map((inputName) => {return {provide: inputName, useValue: componentState[inputName]};});\n        // inputProviders.push({\n        //     provide: GoldenLayoutContainer,\n        //     useValue: container\n        //   });\n          // console.log('inputProviders', inputProviders)\n        const injector = this._createComponentInjector(container, componentState);\n        const factory = this.resolver.resolveComponentFactory(goldenLayoutComponentDefinitions.componentType);\n        const componentRef = this.viewContainer.createComponent(factory, undefined, injector);\n        // (componentRef.instance).data = componentState;\n          // console.log('componentState', componentState)\n\n        // Bind the new component to container's client DOM element.\n        container.getElement().append($(componentRef.location.nativeElement));\n        componentRef.changeDetectorRef.detectChanges();\n\n        // this._bindEventHooks(container, componentRef.instance);\n\n        // Store a ref to the componentRef in the container to support destruction later on.\n        (container as any)[COMPONENT_REF_KEY] = componentRef;\n\n        // // We create an injector out of the data we want to pass down and this components injector\n        // // let injector = ReflectiveInjector.fromResolvedProviders(resolvedInputs, container.parentInjector);\n        \n        // // We create a factory out of the component we want to create\n        // let factory = this.resolver.resolveComponentFactory(componentClass);\n        \n        // // We create the component using the factory and the injector\n        // let component = factory.create(injector);\n\n        // // We insert the component into the dom container\n        // console.log('>>>> created component', component)\n        // container.insert(component.hostView);\n       });\n    });\n  }\n\n  private _createComponentInjector(container: GoldenLayout.Container, componentState: any): Injector {\n    return ReflectiveInjector.resolveAndCreate([\n      {\n        provide: GoldenLayoutContainer,\n        useValue: container\n      },\n      {\n        provide: GoldenLayoutComponentState,\n        useValue: componentState\n      },\n    ], this.injector);\n  }\n\n  ngDoCheck() {\n    if (!this.disabled && this.configDiff) {\n      const changes = this.configDiff.diff(this.config || {});\n\n      if (changes && this.instance) {\n        this.ngOnDestroy();\n\n        this.ngOnInit();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.destroy();\n      });\n\n      this.instance = null;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.instance && changes['disabled']) {\n      if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {\n        if (changes['disabled'].currentValue === false) {\n          this.zone.runOutsideAngular(() => {\n            this.instance.enable();\n          });\n        } else if (changes['disabled'].currentValue === true) {\n          this.zone.runOutsideAngular(() => {\n            this.instance.disable();\n          });\n        }\n      }\n    }\n  }\n\n  public goldenLayout(): any {\n    return this.instance;\n  }\n}","import { Component, ViewEncapsulation,\n    Input, Output, ViewChild, EventEmitter } from '@angular/core';\n  \nimport { GoldenLayoutDirective } from './golden-layout.directive';\nimport { GoldenLayoutConfig } from './golden-layout.interfaces';\n  \n  @Component({\n    selector: 'golden-layout',\n    exportAs: 'angularGoldenLayout',\n    template: '<div></div>',\n    // styleUrls: [ './lib/golden-layout.component.css' ],\n  })\n  export class GoldenLayoutComponent {\n    @Input() disabled: boolean = false;\n  \n    @Input() config: GoldenLayoutConfig;\n  \n    @Input() useGoldenLayoutClass: boolean = true;\n  \n    @ViewChild(GoldenLayoutDirective) directiveRef: GoldenLayoutDirective;\n  \n  \n    constructor() {}\n  }","\nimport { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { GoldenLayoutComponent } from './golden-layout.component';\nimport { GoldenLayoutDirective } from './golden-layout.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [GoldenLayoutComponent, GoldenLayoutDirective],\n  exports: [CommonModule, GoldenLayoutComponent, GoldenLayoutDirective]\n})\nexport class GoldenLayoutModule {\n}"],"names":["InjectionToken","EventEmitter","ReflectiveInjector","Directive","ComponentFactoryResolver","NgZone","Renderer2","ElementRef","KeyValueDiffers","ViewContainerRef","Injector","Optional","Inject","ViewChild","Input","Output","Component","NgModule","CommonModule"],"mappings":"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"}