{"version":3,"file":"angular-golden-layout.umd.js","sources":["../src/lib/golden-layout.interfaces.ts","../src/lib/golden-layout.directive.ts","../src/lib/golden-layout.component.ts","../src/lib/golden-layout.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport * as GoldenLayout from 'golden-layout';\n\nexport const GOLDEN_LAYOUT_CONFIG = new InjectionToken('GOLDEN_LAYOUT_CONFIG');\n\nexport const GoldenLayoutEvents = [\n//   'error',\n//   'success',\n//   'sending',\n//   'canceled',\n//   'complete',\n//   'processing',\n\n//   'drop',\n//   'dragStart',\n//   'dragEnd',\n//   'dragEnter',\n//   'dragOver',\n//   'dragLeave',\n\n//   'thumbnail',\n//   'addedFile',\n//   'removedFile',\n//   'uploadProgress',\n//   'maxFilesReached',\n//   'maxFilesExceeded',\n\n//   'successMultiple',\n//   'sendingMultiple',\n//   'canceledMultiple',\n//   'completeMultiple',\n//   'processingMultiple',\n\n//   'reset',\n//   'queueComplete',\n//   'totalUploadProgress'\n];\n\nexport class GoldenLayoutConfig implements GoldenLayout.Config {\n  settings: GoldenLayout.Settings;\n  dimensions: GoldenLayout.Dimensions;\n  labels: GoldenLayout.Labels;\n  content: GoldenLayout.ItemConfigType[];\n\n  constructor(config: GoldenLayout.Config = {}) {\n    this.assign(config);\n  }\n\n  assign(config: GoldenLayout.Config | any = {}, target?: any) {\n    target = target || this;\n\n    for (const key in config) {\n      if (config[key] != null && !(Array.isArray(config[key])) &&\n        typeof config[key] === 'object' && !(config[key] instanceof HTMLElement))\n      {\n        target[key] = {};\n\n        this.assign(config[key], target[key]);\n      } else {\n        target[key] = config[key];\n      }\n    }\n  }\n}\n\n// export type DropzoneUrlFunction = (files: any) => string;\n// export type DropzoneMethodFunction = (files: any) => string;\n\n// export type DropzoneParamsFunction = (files: any, xhr: any, chunk?: any) => any;\n// export type DropzoneHeadersFunction = () => any;\n\n// export type DropzoneInitFunction = () => any;\n// export type DropzoneFallbackFunction = () => HTMLElement;\n\n// export type DropzoneAcceptFunction = (file: File, done: Function) => any;\n// export type DropzoneResizeFunction = (file: File, width: number, height: number, resizeMethod: string) => any;\n\n// export type DropzoneRenameFileFunction = (file: File) => string;\n// export type DropzoneTransformFileFunction = (file: File, done: Function) => any;\n// export type DropzoneChunksUploadedFunction = (file: File, done: Function) => any;","import * as GoldenLayout from 'golden-layout';\n\nimport { Directive, KeyValueDiffer, Input, Renderer2, KeyValueDiffers, ElementRef, Optional, Inject, SimpleChanges, OnInit, DoCheck, OnChanges, OnDestroy } from '@angular/core';\n\nimport { GOLDEN_LAYOUT_CONFIG } from './golden-layout.interfaces';\n\nimport { GoldenLayoutEvents, GoldenLayoutConfig } from './golden-layout.interfaces';\n\n@Directive({\n  selector: '[golden-layout]',\n  exportAs: 'angularGoldenLayout'\n})\nexport class GoldenLayoutDirective  implements OnInit, DoCheck, OnChanges, OnDestroy {\n  private instance: any;\n\n  private configDiff: KeyValueDiffer<string, any>;\n\n  @Input() disabled: boolean = false;\n\n  @Input('golden-layout') config: GoldenLayoutConfig;\n\n//   @Output('error'                 ) DZ_ERROR                    = new EventEmitter<any>();\n//   @Output('success'               ) DZ_SUCCESS                  = new EventEmitter<any>();\n//   @Output('sending'               ) DZ_SENDING                  = new EventEmitter<any>();\n//   @Output('canceled'              ) DZ_CANCELED                 = new EventEmitter<any>();\n//   @Output('complete'              ) DZ_COMPLETE                 = new EventEmitter<any>();\n//   @Output('processing'            ) DZ_PROCESSING               = new EventEmitter<any>();\n\n//   @Output('drop'                  ) DZ_DROP                     = new EventEmitter<any>();\n//   @Output('dragStart'             ) DZ_DRAGSTART                = new EventEmitter<any>();\n//   @Output('dragEnd'               ) DZ_DRAGEND                  = new EventEmitter<any>();\n//   @Output('dragEnter'             ) DZ_DRAGENTER                = new EventEmitter<any>();\n//   @Output('dragOver'              ) DZ_DRAGOVER                 = new EventEmitter<any>();\n//   @Output('dragLeave'             ) DZ_DRAGLEAVE                = new EventEmitter<any>();\n\n//   @Output('thumbnail'             ) DZ_THUMBNAIL                = new EventEmitter<any>();\n//   @Output('addedFile'             ) DZ_ADDEDFILE                = new EventEmitter<any>();\n//   @Output('removedFile'           ) DZ_REMOVEDFILE              = new EventEmitter<any>();\n//   @Output('uploadProgress'        ) DZ_UPLOADPROGRESS           = new EventEmitter<any>();\n//   @Output('maxFilesReached'       ) DZ_MAXFILESREACHED          = new EventEmitter<any>();\n//   @Output('maxFilesExceeded'      ) DZ_MAXFILESEXCEEDED         = new EventEmitter<any>();\n\n//   @Output('successMultiple'       ) DZ_SUCCESSMULTIPLE          = new EventEmitter<any>();\n//   @Output('sendingMultiple'       ) DZ_SENDINGMULTIPLE          = new EventEmitter<any>();\n//   @Output('canceledMultiple'      ) DZ_CANCELEDMULTIPLE         = new EventEmitter<any>();\n//   @Output('completeMultiple'      ) DZ_COMPLETEMULTIPLE         = new EventEmitter<any>();\n//   @Output('processingMultiple'    ) DZ_PROCESSINGMULTIPLE       = new EventEmitter<any>();\n\n//   @Output('reset'                 ) DZ_RESET                    = new EventEmitter<any>();\n//   @Output('queueComplete'         ) DZ_QUEUECOMPLETE            = new EventEmitter<any>();\n//   @Output('totalUploadProgress'   ) DZ_TOTALUPLOADPROGRESS      = new EventEmitter<any>();\n\n  constructor(private renderer: Renderer2,\n    private elementRef: ElementRef, private differs: KeyValueDiffers,\n    @Optional() @Inject(GOLDEN_LAYOUT_CONFIG) private defaults: GoldenLayoutConfig)\n  {\n    const gl = GoldenLayout;\n  }\n\n  ngOnInit() {\n    const params = new GoldenLayoutConfig(this.defaults);\n\n    params.assign(this.config); // Custom configuration\n//     this.renderer.addClass(this.elementRef.nativeElement,\n//       (params.maxFiles === 1) ? 'dz-single' : 'dz-multiple');\n\n//     this.renderer.removeClass(this.elementRef.nativeElement,\n//       (params.maxFiles === 1) ? 'dz-multiple' : 'dz-single');\n\n    // this.zone.runOutsideAngular(() => {\n      this.instance = new GoldenLayout(params, this.elementRef.nativeElement);\n    // });\n\n//     // Add auto reset handling for events\n//     this.instance.on('success', (result) => {\n//       if (params.autoReset != null) {\n//         setTimeout(() => this.reset(), params.autoReset);\n//       }\n//     });\n\n//     this.instance.on('error', (error) => {\n//       if (params.errorReset != null) {\n//         setTimeout(() => this.reset(), params.errorReset);\n//       }\n//     });\n\n//     this.instance.on('canceled', (result) => {\n//       if (params.cancelReset != null) {\n//         setTimeout(() => this.reset(), params.cancelReset);\n//       }\n//     });\n\n//     // Add native Dropzone event handling\n//     DropzoneEvents.forEach((eventName) => {\n//       this.instance.on(eventName.toLowerCase(), (...args) => {\n//         args = (args.length === 1) ? args[0] : args;\n\n//         if (this[`DZ_${eventName.toUpperCase()}`]) {\n//           this.zone.run(() => {\n//             this[`DZ_${eventName.toUpperCase()}`].emit(args);\n//           });\n//         }\n//       });\n//     });\n\n    if (!this.configDiff) {\n      this.configDiff = this.differs.find(this.config || {}).create();\n\n      this.configDiff.diff(this.config || {});\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.disabled && this.configDiff) {\n      const changes = this.configDiff.diff(this.config || {});\n\n      if (changes && this.instance) {\n        this.ngOnDestroy();\n\n        this.ngOnInit();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.instance) {\n      // this.zone.runOutsideAngular(() => {\n        this.instance.destroy();\n      // });\n\n      this.instance = null;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.instance && changes['disabled']) {\n      if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {\n        if (changes['disabled'].currentValue === false) {\n          // this.zone.runOutsideAngular(() => {\n            this.instance.enable();\n          // });\n        } else if (changes['disabled'].currentValue === true) {\n          // this.zone.runOutsideAngular(() => {\n            this.instance.disable();\n          // });\n        }\n      }\n    }\n  }\n\n  public goldenLayout(): any {\n    return this.instance;\n  }\n\n  // public reset(cancel?: boolean) {\n//     if (this.instance) {\n//       this.zone.runOutsideAngular(() => {\n//         this.instance.removeAllFiles(cancel);\n//       });\n//     }\n//   }\n}","import { Component, ViewEncapsulation,\n    Input, Output, ViewChild, EventEmitter } from '@angular/core';\n  \nimport { GoldenLayoutDirective } from './golden-layout.directive';\nimport { GoldenLayoutConfig } from './golden-layout.interfaces';\n  \n  @Component({\n    selector: 'golden-layout',\n    exportAs: 'angularGoldenLayout',\n    template: '<div></div>',\n    styleUrls: [ './lib/golden-layout.component.css' ],\n  })\n  export class GoldenLayoutComponent {\n    @Input() disabled: boolean = false;\n  \n    @Input() config: GoldenLayoutConfig;\n  \n    @Input() useGoldenLayoutClass: boolean = true;\n  \n    @ViewChild(GoldenLayoutDirective) directiveRef: GoldenLayoutDirective;\n  \n    // @Output('error'                 ) DZ_ERROR                    = new EventEmitter<any>();\n    // @Output('success'               ) DZ_SUCCESS                  = new EventEmitter<any>();\n    // @Output('sending'               ) DZ_SENDING                  = new EventEmitter<any>();\n    // @Output('canceled'              ) DZ_CANCELED                 = new EventEmitter<any>();\n    // @Output('complete'              ) DZ_COMPLETE                 = new EventEmitter<any>();\n    // @Output('processing'            ) DZ_PROCESSING               = new EventEmitter<any>();\n  \n    // @Output('drop'                  ) DZ_DROP                     = new EventEmitter<any>();\n    // @Output('dragStart'             ) DZ_DRAGSTART                = new EventEmitter<any>();\n    // @Output('dragEnd'               ) DZ_DRAGEND                  = new EventEmitter<any>();\n    // @Output('dragEnter'             ) DZ_DRAGENTER                = new EventEmitter<any>();\n    // @Output('dragOver'              ) DZ_DRAGOVER                 = new EventEmitter<any>();\n    // @Output('dragLeave'             ) DZ_DRAGLEAVE                = new EventEmitter<any>();\n  \n    // @Output('thumbnail'             ) DZ_THUMBNAIL                = new EventEmitter<any>();\n    // @Output('addedFile'             ) DZ_ADDEDFILE                = new EventEmitter<any>();\n    // @Output('removedFile'           ) DZ_REMOVEDFILE              = new EventEmitter<any>();\n    // @Output('uploadProgress'        ) DZ_UPLOADPROGRESS           = new EventEmitter<any>();\n    // @Output('maxFilesReached'       ) DZ_MAXFILESREACHED          = new EventEmitter<any>();\n    // @Output('maxFilesExceeded'      ) DZ_MAXFILESEXCEEDED         = new EventEmitter<any>();\n  \n    // @Output('successMultiple'       ) DZ_SUCCESSMULTIPLE          = new EventEmitter<any>();\n    // @Output('sendingMultiple'       ) DZ_SENDINGMULTIPLE          = new EventEmitter<any>();\n    // @Output('canceledMultiple'      ) DZ_CANCELEDMULTIPLE         = new EventEmitter<any>();\n    // @Output('completeMultiple'      ) DZ_COMPLETEMULTIPLE         = new EventEmitter<any>();\n    // @Output('processingMultiple'    ) DZ_PROCESSINGMULTIPLE       = new EventEmitter<any>();\n  \n    // @Output('reset'                 ) DZ_RESET                    = new EventEmitter<any>();\n    // @Output('queueComplete'         ) DZ_QUEUECOMPLETE            = new EventEmitter<any>();\n    // @Output('totalUploadProgress'   ) DZ_TOTALUPLOADPROGRESS      = new EventEmitter<any>();\n  \n    constructor() {}\n  }","\nimport { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { GoldenLayoutComponent } from './golden-layout.component';\nimport { GoldenLayoutDirective } from './golden-layout.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [GoldenLayoutComponent, GoldenLayoutDirective],\n  exports: [CommonModule, GoldenLayoutComponent, GoldenLayoutDirective]\n})\nexport class GoldenLayoutModule {\n}"],"names":["InjectionToken","Directive","Renderer2","ElementRef","KeyValueDiffers","Optional","Inject","Input","Component","ViewChild","NgModule","CommonModule"],"mappings":"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"}